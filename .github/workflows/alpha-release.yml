name: Publish Alpha

concurrency:
  group: alpha
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - 'src/**'

jobs:
  calculate-version:
    name: Calculate version
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      nuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true

      - name: Display GItVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

  build-and-test:
    name: Build and run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2

      - name: Setup .NET Core 6
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.x'
          include-prerelease: true

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        env:
          ASPNETCORE_ENVIRONMENT: Test
        run: dotnet test --no-restore --collect:"XPlat Code Coverage"

      - name: Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deployment:
    name: deployment
    environment: alpha
    runs-on: ubuntu-latest
    needs:
      - calculate-version
      - build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2

      - name: Setup .NET Core 6
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.x'
          include-prerelease: true

      - name: Restore
        working-directory: src
        run: |
          dotnet restore Waystone.Common.Api
          dotnet restore Waystone.Common.Application
          dotnet restore Waystone.Common.Domain
          dotnet restore Waystone.Common.Infrastructure

      - name: build
        working-directory: src
        run: |
          dotnet build Waystone.Common.Api -c Release --no-restore
          dotnet build Waystone.Common.Application -c Release --no-restore
          dotnet build Waystone.Common.Domain -c Release --no-restore
          dotnet build Waystone.Common.Infrastructure -c Release --no-restore

      - name: pack
        working-directory: src
        run: |
          dotnet pack Waystone.Common.Api -c Release --no-restore -o out -p:PackageVersion=${{ needs.calculate-version.outputs.semVer }}
          dotnet pack Waystone.Common.Application -c Release --no-restore -o out -p:PackageVersion=${{ needs.calculate-version.outputs.semVer }}
          dotnet pack Waystone.Common.Application.Contracts -c Release --no-restore -o out -p:PackageVersion=${{ needs.calculate-version.outputs.semVer }}
          dotnet pack Waystone.Common.Domain -c Release --no-restore -o out -p:PackageVersion=${{ needs.calculate-version.outputs.semVer }}
          dotnet pack Waystone.Common.Domain.Contracts -c Release --no-restore -o out -p:PackageVersion=${{ needs.calculate-version.outputs.semVer }}
          dotnet pack Waystone.Common.Infrastructure -c Release --no-restore -o out -p:PackageVersion=${{ needs.calculate-version.outputs.semVer }}
          dotnet pack Waystone.Common.Infrastructure.Contracts -c Release --no-restore -o out -p:PackageVersion=${{ needs.calculate-version.outputs.semVer }}

      - name: deploy
        working-directory: src
        run: dotnet nuget push ./out/*.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - calculate-version
      - deployment
    steps:
      - name: checkout
        uses: actions/checkout@v2.4.2
        with:
          fetch-depth: 0

      - name: bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ needs.calculate-version.outputs.semVer }}

      - name: create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: "Alpha: ${{ steps.tag_version.outputs.new_tag }}"
          generateReleaseNotes: true
          prerelease: true
